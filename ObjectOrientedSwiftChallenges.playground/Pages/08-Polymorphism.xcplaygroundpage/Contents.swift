/*:

# Arcane Quest ‚Äì Page 9

### Parties, Encounters & Polymorphism

You‚Äôve crafted heroes with inheritance, protocols, extensions, and
overrides. Now assemble them into a **party** and watch polymorphism do
the heavy lifting.

## What you‚Äôll practice

* Storing mixed subclasses in a `[Player]` array
* Building protocol‚Äëtyped collections (`[Casts]`, `[Fights]`)
* Seeing which implementation runs when calling through a protocol
  */

import Foundation

/* --------------------------------------------------
MARK: 1. Abilities & Defaults (quick recap)
-------------------------------------------------- */
protocol Casts {
  var name: String { get }
  func castSpell()
}
protocol Fights {
  var name: String { get }
  func melee()
}

extension Casts {
  func castSpell() { print("(name) casts a dazzling spell!") }
}
extension Fights {
  func melee() { print("(name) attacks with sword!") }
}

/* --------------------------------------------------
MARK: 2. Player Hierarchy (simplified)
-------------------------------------------------- */
class Player {
  var name: String
  var hitPoints: Int
  init(name: String, hitPoints: Int = 10) {
    self.name = name; self.hitPoints = hitPoints
  }
  func adventure() { print("(name) explores the dungeon‚Ä¶") }
}

class Fighter: Player, Fights {
  var battleCry: String
  init(name: String, battleCry: String = "Huzzah!") {
  self.battleCry = battleCry
    super.init(name: name, hitPoints: 8)
  }
  func melee() { print("(battleCry) ‚Äî (name) attacks with sword!") }
}

class Wizard: Player, Casts {
  init(name: String) { super.init(name: name, hitPoints: 4) }
}

class Priest: Player, Casts {
  init(name: String) { super.init(name: name, hitPoints: 6) }
  func castSpell() { print("(name) heals the party!") }
}

class Elf: Player, Casts, Fights {
  init(name: String) { super.init(name: name, hitPoints: 6) }
}

/* --------------------------------------------------
MARK: 3. Build a Mixed Party (given)
-------------------------------------------------- */
let party: [Player] = [
  Fighter(name: "Conan"),
  Wizard(name: "Merlin"),
  Priest(name: "Clancy"),
  Elf(name: "Arwen")
]

/* --------------------------------------------------
MARK: 4. TODO A ‚Äì Protocol‚ÄëTyped Arrays
Create two new arrays:
‚Ä¢ `casters` ‚Äì every party member that conforms to Casts
‚Ä¢ `fighters` ‚Äì every party member that conforms to Fights
-------------------------------------------------- */
// üõ†Ô∏è Your code here: var casters: \[Casts] = ‚Ä¶   var fighters: \[Fights] = ‚Ä¶

/* --------------------------------------------------
MARK: 5. TODO B ‚Äì startBattle()
Write a function that:

1. Iterates over `fighters` and calls `melee()`.
2. Iterates over `casters` and calls `castSpell()`.
   -------------------------------------------------- */
   // üõ†Ô∏è Your function startBattle() {}

/* --------------------------------------------------
MARK: 6. Quick Test ‚Äì Uncomment after you implement
-------------------------------------------------- */
/*
startBattle()
// Example output (order may vary):
// Huzzah! ‚Äî Conan attacks with sword!
// Merlin casts a dazzling spell!
// Clancy heals the party!
// Arwen attacks with sword!
// Arwen casts a dazzling spell!
*/

/* --------------------------------------------------
üß† Think About It
‚Ä¢ Why does Clancy‚Äôs override print "heals the party" while Merlin &
Arwen use the default castSpell()?
‚Ä¢ If you store `let wiz: Casts = Wizard(name: "Gandalf")` and call
`wiz.castSpell()`, what prints? Why?
*/

/* --------------------------------------------------
‚≠ê Stretch Challenge ‚Äì Damage System

1. Define protocol `Damageable` with `var hitPoints: Int { get set }`
   and `mutating func takeDamage(_ amount: Int)` defaulting to
   `hitPoints -= amount`.
2. Conform Player to Damageable.
3. Modify `startBattle()` so each melee attack deals 2 damage to a
   random Damageable in the party.
4. Print each member‚Äôs HP at the end. Who survived?
   -------------------------------------------------- */

